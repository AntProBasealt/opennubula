{"version":3,"file":"webauthn-json.js","sources":["../../src/schema-format.ts","../../src/webauthn-schema.ts","../../src/bin/webauthn-json.ts"],"sourcesContent":["type SchemaLeaf = \"copy\" | \"convert\";\ninterface SchemaObject { [property: string]: { required: boolean; schema: Schema; }; }\ntype SchemaArray = [SchemaObject] | [SchemaLeaf];\n\nexport type Schema = SchemaLeaf | SchemaArray | SchemaObject;\n\n// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\nexport const copyValue = \"copy\";\nexport const convertValue = \"convert\";\n\nexport function convert<From, To>(conversionFn: (v: From) => To, schema: Schema, input: any): any {\n  if (schema === copyValue) {\n    return input;\n  }\n  if (schema === convertValue) {\n    return conversionFn(input);\n  }\n  if (schema instanceof Array) {\n    return input.map((v: any) => convert<From, To>(conversionFn, schema[0], v));\n  }\n  if (schema instanceof Object) {\n    const output: any = {};\n    for (const [key, schemaField] of Object.entries(schema)) {\n      if (!(key in input)) {\n        if (schemaField.required) {\n          throw new Error(`Missing key: ${key}`);\n        }\n        continue;\n      }\n      // Fields can be null (rather than missing or `undefined`), e.g. the\n      // `userHandle` field of the `AuthenticatorAssertionResponse`:\n      // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n      if (input[key] == null) {\n        output[key] = null;\n        continue;\n      }\n      output[key] = convert<From, To>(conversionFn, schemaField.schema, input[key]);\n    }\n    return output;\n  }\n}\n\nexport function required(schema: Schema): any {\n  return {\n    required: true,\n    schema,\n  };\n}\n\nexport function optional(schema: Schema): any {\n  return {\n    required: false,\n    schema,\n  };\n}\n","import { convertValue as convert, copyValue as copy, optional, required, Schema } from \"./schema-format\";\n\n// Shared by `create()` and `get()`.\n\nconst publicKeyCredentialDescriptorSchema: Schema = {\n  type: required(copy),\n  id: required(convert),\n  transports: optional(copy),\n};\n\nconst extensionsSchema: Schema = {\n  appid: optional(copy),\n  txAuthSimple: optional(copy),\n  txAuthGeneric: optional({\n    contentType: required(copy),\n    content: required(convert),\n  }),\n  authnSel: optional([convert]),\n  exts: optional(copy),\n  uvi: optional(copy),\n  loc: optional(copy),\n  uvm: optional(copy),\n  authenticatorBiometricPerfBounds: optional(copy),\n};\n\n// `navigator.create()` request\n\nexport const credentialCreationOptions: Schema = {\n  publicKey: required({\n    rp: required(copy),\n    user: required({\n      id: required(convert),\n      name: required(copy),\n      displayName: required(copy),\n      icon: optional(copy),\n    }),\n\n    challenge: required(convert),\n    pubKeyCredParams: required(copy),\n\n    timeout: optional(copy),\n    excludeCredentials: optional([publicKeyCredentialDescriptorSchema]),\n    authenticatorSelection: optional(copy),\n    attestation: optional(copy),\n    extensions: optional(extensionsSchema),\n  }),\n  signal: optional(copy),\n};\n\n// `navigator.create()` response\n\nexport const publicKeyCredentialWithAttestation: Schema = {\n  type: required(copy),\n  id: required(copy),\n  rawId: required(convert),\n  response: required({\n    clientDataJSON: required(convert),\n    attestationObject: required(convert),\n  }),\n};\n\n// `navigator.get()` request\n\nexport const credentialRequestOptions: Schema = {\n  mediation: optional(copy),\n  publicKey: required({\n    challenge: required(convert),\n    timeout: optional(copy),\n    rpId: optional(copy),\n    allowCredentials: optional([publicKeyCredentialDescriptorSchema]),\n    userVerification: optional(copy),\n    extensions: optional(extensionsSchema),\n  }),\n  signal: optional(copy),\n};\n\n// `navigator.get()` response\n\nexport const publicKeyCredentialWithAssertion: Schema = {\n  type: required(copy),\n  id: required(copy),\n  rawId: required(convert),\n  response: required({\n    clientDataJSON: required(convert),\n    authenticatorData: required(convert),\n    signature: required(convert),\n    userHandle: required(convert),\n  }),\n};\n\nexport const schema: { [s: string]: Schema } = {\n  credentialCreationOptions,\n  publicKeyCredentialWithAttestation,\n  credentialRequestOptions,\n  publicKeyCredentialWithAssertion,\n};\n","/* tslint:disable:no-console no-var-requires */\n\ndeclare const version: string;\nimport { schema } from \"../index\";\n\nconst help = `Usage: ${process.argv[1]} schema`;\n\nconst command = process.argv[2];\nif (command === \"schema\") {\n  const schemaWithVersion = { ...schema, version };\n  console.log(JSON.stringify(schemaWithVersion, null, \"  \"));\n} else {\n  console.log(help);\n}\n"],"names":["required","schema","optional","publicKeyCredentialDescriptorSchema","type","id","transports","extensionsSchema","appid","txAuthSimple","txAuthGeneric","contentType","content","authnSel","exts","uvi","loc","uvm","authenticatorBiometricPerfBounds","credentialCreationOptions","publicKey","rp","user","name","displayName","icon","challenge","pubKeyCredParams","timeout","excludeCredentials","authenticatorSelection","attestation","extensions","signal","publicKeyCredentialWithAttestation","rawId","response","clientDataJSON","attestationObject","credentialRequestOptions","mediation","rpId","allowCredentials","userVerification","publicKeyCredentialWithAssertion","authenticatorData","signature","userHandle","help","process","argv","schemaWithVersion","version","console","log","JSON","stringify"],"mappings":";gIA2CgBA,EAASC,GACvB,MAAO,CACLD,UAAU,EACVC,OAAAA,YAIYC,EAASD,GACvB,MAAO,CACLD,UAAU,EACVC,OAAAA,GCjDJ,MAAME,EAA8C,CAClDC,KAAMJ,EDGiB,QCFvBK,GAAIL,EDGsB,WCF1BM,WAAYJ,EDCW,SCEnBK,EAA2B,CAC/BC,MAAON,EDHgB,QCIvBO,aAAcP,EDJS,QCKvBQ,cAAeR,EAAS,CACtBS,YAAaX,EDNQ,QCOrBY,QAASZ,EDNe,aCQ1Ba,SAAUX,EAAS,CDRO,YCS1BY,KAAMZ,EDViB,QCWvBa,IAAKb,EDXkB,QCYvBc,IAAKd,EDZkB,QCavBe,IAAKf,EDbkB,QCcvBgB,iCAAkChB,EDdX,SCkFZD,EAAkC,CAC7CkB,0BAhE+C,CAC/CC,UAAWpB,EAAS,CAClBqB,GAAIrB,EDrBiB,QCsBrBsB,KAAMtB,EAAS,CACbK,GAAIL,EDtBkB,WCuBtBuB,KAAMvB,EDxBa,QCyBnBwB,YAAaxB,EDzBM,QC0BnByB,KAAMvB,ED1Ba,UC6BrBwB,UAAW1B,ED5Ba,WC6BxB2B,iBAAkB3B,ED9BG,QCgCrB4B,QAAS1B,EDhCY,QCiCrB2B,mBAAoB3B,EAAS,CAACC,IAC9B2B,uBAAwB5B,EDlCH,QCmCrB6B,YAAa7B,EDnCQ,QCoCrB8B,WAAY9B,EAASK,KAEvB0B,OAAQ/B,EDtCe,SCoFvBgC,mCAzCwD,CACxD9B,KAAMJ,ED5CiB,QC6CvBK,GAAIL,ED7CmB,QC8CvBmC,MAAOnC,ED7CmB,WC8C1BoC,SAAUpC,EAAS,CACjBqC,eAAgBrC,ED/CQ,WCgDxBsC,kBAAmBtC,EDhDK,cCoF1BuC,yBA9B8C,CAC9CC,UAAWtC,EDxDY,QCyDvBkB,UAAWpB,EAAS,CAClB0B,UAAW1B,EDzDa,WC0DxB4B,QAAS1B,ED3DY,QC4DrBuC,KAAMvC,ED5De,QC6DrBwC,iBAAkBxC,EAAS,CAACC,IAC5BwC,iBAAkBzC,ED9DG,QC+DrB8B,WAAY9B,EAASK,KAEvB0B,OAAQ/B,EDjEe,SCsFvB0C,iCAhBsD,CACtDxC,KAAMJ,EDvEiB,QCwEvBK,GAAIL,EDxEmB,QCyEvBmC,MAAOnC,EDxEmB,WCyE1BoC,SAAUpC,EAAS,CACjBqC,eAAgBrC,ED1EQ,WC2ExB6C,kBAAmB7C,ED3EK,WC4ExB8C,UAAW9C,ED5Ea,WC6ExB+C,WAAY/C,ED7EY,eEJtBgD,YAAiBC,QAAQC,KAAK,YAGpC,GAAgB,WADAD,QAAQC,KAAK,GACH,CACxB,MAAMC,iCAAyBlD,IAAQmD,QAAAA,UACvCC,QAAQC,IAAIC,KAAKC,UAAUL,EAAmB,KAAM,YAEpDE,QAAQC,IAAIN"}