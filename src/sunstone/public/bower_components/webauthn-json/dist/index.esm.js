function e(e){const t="==".slice(0,(4-e.length%4)%4),n=e.replace(/-/g,"+").replace(/_/g,"/")+t,i=atob(n),r=new ArrayBuffer(i.length),a=new Uint8Array(r);for(let e=0;e<i.length;e++)a[e]=i.charCodeAt(e);return r}function t(e){const t=new Uint8Array(e);let n="";for(const e of t)n+=String.fromCharCode(e);return btoa(n).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}const n="copy",i="convert";function r(e,t,a){if(t===n)return a;if(t===i)return e(a);if(t instanceof Array)return a.map(n=>r(e,t[0],n));if(t instanceof Object){const n={};for(const[i,o]of Object.entries(t))if(i in a)null!=a[i]?n[i]=r(e,o.schema,a[i]):n[i]=null;else if(o.required)throw new Error(`Missing key: ${i}`);return n}}function a(e){return{required:!0,schema:e}}function o(e){return{required:!1,schema:e}}const c={type:a(n),id:a(i),transports:o(n)},s={appid:o(n),txAuthSimple:o(n),txAuthGeneric:o({contentType:a(n),content:a(i)}),authnSel:o([i]),exts:o(n),uvi:o(n),loc:o(n),uvm:o(n),authenticatorBiometricPerfBounds:o(n)},l={publicKey:a({rp:a(n),user:a({id:a(i),name:a(n),displayName:a(n),icon:o(n)}),challenge:a(i),pubKeyCredParams:a(n),timeout:o(n),excludeCredentials:o([c]),authenticatorSelection:o(n),attestation:o(n),extensions:o(s)}),signal:o(n)},u={type:a(n),id:a(n),rawId:a(i),response:a({clientDataJSON:a(i),attestationObject:a(i)})},d={mediation:o(n),publicKey:a({challenge:a(i),timeout:o(n),rpId:o(n),allowCredentials:o([c]),userVerification:o(n),extensions:o(s)}),signal:o(n)},p={type:a(n),id:a(n),rawId:a(i),response:a({clientDataJSON:a(i),authenticatorData:a(i),signature:a(i),userHandle:a(i)})},f={credentialCreationOptions:l,publicKeyCredentialWithAttestation:u,credentialRequestOptions:d,publicKeyCredentialWithAssertion:p};async function g(n){const i=r(e,l,n),a=await navigator.credentials.create(i),o=r(t,u,a);return o.clientExtensionResults=a.getClientExtensionResults(),o}async function h(n){const i=r(e,d,n),a=await navigator.credentials.get(i),o=r(t,p,a);return o.clientExtensionResults=a.getClientExtensionResults(),o}function y(){return!!(navigator.credentials&&navigator.credentials.create&&navigator.credentials.get&&window.PublicKeyCredential)}export{g as create,h as get,f as schema,y as supported};
//# sourceMappingURL=index.esm.js.map
